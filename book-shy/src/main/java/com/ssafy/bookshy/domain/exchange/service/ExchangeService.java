package com.ssafy.bookshy.domain.exchange.service;

import com.ssafy.bookshy.domain.book.entity.Book;
import com.ssafy.bookshy.domain.chat.entity.ChatCalendar;
import com.ssafy.bookshy.domain.chat.entity.ChatRoom;
import com.ssafy.bookshy.domain.chat.repository.ChatCalendarRepository;
import com.ssafy.bookshy.domain.chat.repository.ChatRoomRepository;
import com.ssafy.bookshy.domain.exchange.dto.ExchangeRequestDto;
import com.ssafy.bookshy.domain.exchange.dto.ReviewSubmitRequest;
import com.ssafy.bookshy.domain.exchange.entity.ExchangeRequest;
import com.ssafy.bookshy.domain.exchange.entity.ExchangeRequestReview;
import com.ssafy.bookshy.domain.exchange.exception.ExchangeErrorCode;
import com.ssafy.bookshy.domain.exchange.exception.ExchangeException;
import com.ssafy.bookshy.domain.exchange.repository.ExchangeRequestRepository;
import com.ssafy.bookshy.domain.exchange.repository.ExchangeRequestReviewRepository;
import com.ssafy.bookshy.domain.library.entity.Library;
import com.ssafy.bookshy.domain.library.repository.LibraryRepository;
import com.ssafy.bookshy.domain.notification.service.NotificationService;
import com.ssafy.bookshy.domain.users.entity.Users;
import com.ssafy.bookshy.domain.users.repository.UserRepository;
import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

@Service
@RequiredArgsConstructor
public class ExchangeService {

    private final ExchangeRequestRepository exchangeRequestRepository;
    private final ExchangeRequestReviewRepository reviewRepository;
    private final ChatRoomRepository chatRoomRepository;
    private final ChatCalendarRepository chatCalendarRepository;
    private final LibraryRepository libraryRepository;
    private final UserRepository userRepository;
    private final NotificationService notificationService;

    /**
     * üì© ÎèÑÏÑú ÍµêÌôò ÏöîÏ≤≠ Ï≤òÎ¶¨
     *
     * - ÍµêÌôò ÏöîÏ≤≠ Ï†ÄÏû•
     * - Ï±ÑÌåÖÎ∞© Ï°¥Ïû¨ Ïó¨Î∂Ä ÌôïÏù∏
     * - Ï∫òÎ¶∞Îçî Îì±Î°ù (ÍµêÌôòÏùº Ìè¨Ìï®)
     *
     * @param dto ÍµêÌôò ÏöîÏ≤≠ Ï†ïÎ≥¥
     */
    @Transactional
    public void requestExchange(ExchangeRequestDto dto) {
        validateDuplicate(dto);

        // 1Ô∏è‚É£ ÍµêÌôò ÏöîÏ≤≠ Ï†ÄÏû•
        ExchangeRequest request = ExchangeRequest.builder()
                .bookAId(dto.getBookAId())
                .bookBId(dto.getBookBId())
                .requesterId(dto.getRequesterId())
                .responderId(dto.getResponderId())
                .type(ExchangeRequest.RequestType.EXCHANGE)
                .build();
        exchangeRequestRepository.save(request);

        // 2Ô∏è‚É£ Ï±ÑÌåÖÎ∞© Ï°¥Ïû¨ Ïó¨Î∂Ä ÌôïÏù∏
        ChatRoom room = chatRoomRepository.findById(dto.getRoomId())
                .orElseThrow(() -> new ExchangeException(ExchangeErrorCode.CHATROOM_NOT_FOUND));

        // 3Ô∏è‚É£ Ï∫òÎ¶∞Îçî Îì±Î°ù
        ChatCalendar calendar = ChatCalendar.builder()
                .title(dto.getTitle())
                .description(dto.getDescription())
                .exchangeDate(parseDate(dto.getExchangeDate()))
                .chatRoom(room)
                .requestId(request.getRequestId())
                .build();
        chatCalendarRepository.save(calendar);

        // ÏïåÎ¶º Ï†ÑÏÜ°
        Users requester = userRepository.findById(dto.getRequesterId())
                .orElseThrow(() -> new ExchangeException(ExchangeErrorCode.USER_NOT_FOUND));
        Users responder = userRepository.findById(dto.getResponderId())
                .orElseThrow(() -> new ExchangeException(ExchangeErrorCode.USER_NOT_FOUND));

        notificationService.sendTransactionReminder(
                responder.getUserId(),
                requester.getNickname(),
                dto.getExchangeDate().substring(0, 10)
        );
    }

    /**
     * üì© ÎèÑÏÑú ÎåÄÏó¨ ÏöîÏ≤≠ Ï≤òÎ¶¨
     *
     * - ÎåÄÏó¨ ÏöîÏ≤≠ Ï†ÄÏû•
     * - Ï±ÑÌåÖÎ∞© Ï°¥Ïû¨ Ïó¨Î∂Ä ÌôïÏù∏
     * - ÎåÄÏó¨ Í∏∞Í∞Ñ Ìè¨Ìï® Ï∫òÎ¶∞Îçî Îì±Î°ù
     *
     * @param dto ÎåÄÏó¨ ÏöîÏ≤≠ Ï†ïÎ≥¥
     */
    @Transactional
    public void requestRental(ExchangeRequestDto dto) {
        validateDuplicate(dto);

        ExchangeRequest request = ExchangeRequest.builder()
                .bookAId(dto.getBookAId())
                .bookBId(dto.getBookBId())
                .requesterId(dto.getRequesterId())
                .responderId(dto.getResponderId())
                .type(ExchangeRequest.RequestType.RENTAL)
                .build();
        exchangeRequestRepository.save(request);

        ChatRoom room = chatRoomRepository.findById(dto.getRoomId())
                .orElseThrow(() -> new ExchangeException(ExchangeErrorCode.CHATROOM_NOT_FOUND));

        ChatCalendar calendar = ChatCalendar.builder()
                .title(dto.getTitle())
                .description(dto.getDescription())
                .rentalStartDate(parseDate(dto.getRentalStartDate()))
                .rentalEndDate(parseDate(dto.getRentalEndDate()))
                .chatRoom(room)
                .requestId(request.getRequestId())
                .build();
        chatCalendarRepository.save(calendar);

        // ÏïåÎ¶º Ï†ÑÏÜ°
        Users requester = userRepository.findById(dto.getRequesterId())
                .orElseThrow(() -> new ExchangeException(ExchangeErrorCode.USER_NOT_FOUND));
        Users responder = userRepository.findById(dto.getResponderId())
                .orElseThrow(() -> new ExchangeException(ExchangeErrorCode.USER_NOT_FOUND));

        notificationService.sendTransactionReminder(
                responder.getUserId(),
                requester.getNickname(),
                dto.getExchangeDate().substring(0, 10)
        );
    }


    /**
     * ‚ö†Ô∏è Ï§ëÎ≥µ Í±∞Îûò ÏöîÏ≤≠ Î∞©ÏßÄ
     * - ÎèôÏùºÌïú ÏöîÏ≤≠ÏûêÍ∞Ä ÎèôÏùºÌïú Ï±ÖÏúºÎ°ú ÎèôÏùºÏù∏ÏóêÍ≤å ÏöîÏ≤≠Ìïú Í≤ΩÏö∞ ÏòàÏô∏ Î∞úÏÉù
     */
    private void validateDuplicate(ExchangeRequestDto dto) {
        boolean exists = exchangeRequestRepository.existsByBookAIdAndBookBIdAndRequesterIdAndResponderId(
                dto.getBookAId(), dto.getBookBId(), dto.getRequesterId(), dto.getResponderId());
        if (exists) {
            throw new ExchangeException(ExchangeErrorCode.DUPLICATE_REQUEST);
        }
    }

    /**
     * üìÖ ISO8601 Î¨∏ÏûêÏó¥ÏùÑ LocalDateTimeÏúºÎ°ú Î≥ÄÌôò
     * @param dateString Î¨∏ÏûêÏó¥ (Ïòà: 2025-05-08T10:00:00)
     * @return LocalDateTime Í∞ùÏ≤¥
     */
    private LocalDateTime parseDate(String dateString) {
        return LocalDateTime.parse(dateString, DateTimeFormatter.ISO_DATE_TIME);
    }

    /**
     * üí¨ Îß§ÎÑà ÌèâÍ∞Ä Ï†úÏ∂ú Î∞è Í±∞Îûò ÏôÑÎ£å Ï≤òÎ¶¨
     *
     * 1Ô∏è‚É£ Î¶¨Î∑∞ Ï†ïÎ≥¥ Ï†ÄÏû• (reviewerId ‚Üí revieweeId ÌèâÏ†ê)
     * 2Ô∏è‚É£ Ìï¥Îãπ Í±∞Îûò ÏöîÏ≤≠Ïùò Î¶¨Î∑∞ ÏàòÍ∞Ä 2Í∞úÏù∏ÏßÄ ÌôïÏù∏ (ÏñëÏ™Ω Î™®Îëê ÏûëÏÑ± Ïó¨Î∂Ä)
     * 3Ô∏è‚É£ Î™®Îëê ÏôÑÎ£å Ïãú Í±∞Îûò ÏÉÅÌÉú COMPLETED Î°ú Î≥ÄÍ≤Ω
     * 4Ô∏è‚É£ ÎÇ¥Í∞Ä Ï†úÏ∂úÌïú Ï±ÖÎì§ÏùÑ ÏÉÅÎåÄÎ∞©ÏóêÍ≤å ÏÜåÏú†Í∂å Ïù¥Ï†Ñ (Library + Book Î™®Îëê Ïù¥Ï†Ñ)
     * @param reviewerId Î¶¨Î∑∞ ÏûëÏÑ±Ïûê ID
     * @param request Î¶¨Î∑∞ ÏöîÏ≤≠ Ï†ïÎ≥¥
     * @return true: Í±∞Îûò ÏôÑÎ£åÎê®, false: ÏÉÅÎåÄÎ∞© Î¶¨Î∑∞ ÎØ∏Ï†úÏ∂ú
     */
    @Transactional
    public boolean submitReview(Long reviewerId, ReviewSubmitRequest request) {
        // 1Ô∏è‚É£ ÏÉÅÎåÄÎ∞© ID ÌôïÏù∏
        Long revieweeId = request.getUserIds().stream()
                .filter(id -> !id.equals(reviewerId))
                .findFirst()
                .orElseThrow(() -> new ExchangeException(ExchangeErrorCode.UNAUTHORIZED_REVIEW_SUBMITTER));

        // 2Ô∏è‚É£ Ï§ëÎ≥µ Î¶¨Î∑∞ Î∞©ÏßÄ
        if (reviewRepository.existsByRequestIdAndReviewerId(request.getRequestId(), reviewerId)) {
            throw new ExchangeException(ExchangeErrorCode.REVIEW_ALREADY_SUBMITTED);
        }

        // 3Ô∏è‚É£ Î¶¨Î∑∞ Ï†ÄÏû•
        ExchangeRequestReview review = ExchangeRequestReview.builder()
                .requestId(request.getRequestId())
                .reviewerId(reviewerId)
                .revieweeId(revieweeId)
                .rating(request.getRating())
                .condition(request.getRatings().getCondition())
                .punctuality(request.getRatings().getPunctuality())
                .manner(request.getRatings().getManner())
                .build();
        reviewRepository.save(review);

        // 4Ô∏è‚É£ Î¶¨Î∑∞ Ïàò Ï≤¥ÌÅ¨
        List<ExchangeRequestReview> reviews = reviewRepository.findByRequestId(request.getRequestId());
        if (reviews.size() < 2) return false;

        // 5Ô∏è‚É£ Í±∞Îûò ÏÉÅÌÉú Î≥ÄÍ≤Ω
        ExchangeRequest exchangeRequest = exchangeRequestRepository.findById(request.getRequestId())
                .orElseThrow(() -> new ExchangeException(ExchangeErrorCode.EXCHANGE_REQUEST_NOT_FOUND));
        exchangeRequest.complete();

        // 6Ô∏è‚É£ ÏÜåÏú†Í∂å Ïù¥Ï†Ñ (EXCHANGEÎßå)
        if ("EXCHANGE".equalsIgnoreCase(request.getTradeType())) {
            Users reviewee = Users.builder().userId(revieweeId).build();

            for (ReviewSubmitRequest.ReviewedBook book : request.getBooks()) {
                Library lib = libraryRepository.findById(book.getLibraryId())
                        .orElseThrow(() -> new ExchangeException(ExchangeErrorCode.BOOK_NOT_FOUND));
                lib.transferTo(reviewee);
                Book entity = lib.getBook();
                if (entity != null) entity.transferTo(reviewee);
            }
        }

        return true;
    }


}